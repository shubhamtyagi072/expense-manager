// Generated by CodiumAI

describe("Home", () => {
  // Renders the component without crashing
  it("should render the Home component without crashing", () => {
    // Mock dependencies
    jest.mock("react-redux", () => ({
      useDispatch: jest.fn(),
      useSelector: jest.fn(),
    }));
    jest.mock("../../Actions/Expense", () => ({
      getExpenses: jest.fn(),
    }));

    // Import the component
    const { Home } = require("./Home");

    // Render the component
    const wrapper = shallow(<Home drawerChange={jest.fn()} />);

    // Expect the component to render without crashing
    expect(wrapper.exists()).toBe(true);
  });

  // Displays the name of the user
  it("should display the name of the user", () => {
    // Mock useSelector and useDispatch
    const useSelectorMock = jest.spyOn(reactRedux, "useSelector");
    const useDispatchMock = jest.spyOn(reactRedux, "useDispatch");

    // Mock useSelector to return user data
    useSelectorMock.mockReturnValue({ user_id: 1, name: "John Doe" });

    // Render the Home component
    const wrapper = shallow(<Home />);

    // Expect the name to be displayed correctly
    expect(wrapper.find("h2").text()).toEqual(
      "Hi John Doe manage your expenses here!!"
    );

    // Restore the mocks
    useSelectorMock.mockRestore();
    useDispatchMock.mockRestore();
  });

  // Displays a button to add a new expense
  it("should display a button to add a new expense", () => {
    // Mock the necessary dependencies and state
    const drawerChange = jest.fn();
    const useSelectorMock = jest.spyOn(redux, "useSelector");
    useSelectorMock.mockReturnValue({ user_id: "123", name: "John" });
    const useDispatchMock = jest.spyOn(redux, "useDispatch");
    const dispatchMock = jest.fn();
    useDispatchMock.mockReturnValue(dispatchMock);

    // Render the Home component
    const wrapper = shallow(<Home drawerChange={drawerChange} />);

    // Assert that the button is displayed
    expect(wrapper.find(Button).exists()).toBe(true);
  });
});
